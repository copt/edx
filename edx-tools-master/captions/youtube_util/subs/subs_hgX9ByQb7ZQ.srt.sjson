{
  "start": [
    1380, 
    9300, 
    17980, 
    25350, 
    33420, 
    40810, 
    49100, 
    58410, 
    66130, 
    73910, 
    82130, 
    91290, 
    100730, 
    107980, 
    116010, 
    125215, 
    136130, 
    146420, 
    156660, 
    163750, 
    172060, 
    179820, 
    186890, 
    195220, 
    203350, 
    216380, 
    224600, 
    231660, 
    238660, 
    248240, 
    256750, 
    264150, 
    272080, 
    283650, 
    291960, 
    299690, 
    308610, 
    316910, 
    329730, 
    337580, 
    348100, 
    356880, 
    366260, 
    373340, 
    383700, 
    391390, 
    398715, 
    407380, 
    414940, 
    422870, 
    430870, 
    439020, 
    450190, 
    460780, 
    469050
  ], 
  "end": [
    9300, 
    17980, 
    25350, 
    33420, 
    40810, 
    49100, 
    58410, 
    66130, 
    73910, 
    82130, 
    91290, 
    100730, 
    107980, 
    116010, 
    125215, 
    136130, 
    144666, 
    156660, 
    163750, 
    172060, 
    179820, 
    186890, 
    195220, 
    203350, 
    216380, 
    224600, 
    231660, 
    238660, 
    248240, 
    256750, 
    264150, 
    272080, 
    283650, 
    291960, 
    299690, 
    308610, 
    316910, 
    329730, 
    337580, 
    348100, 
    356880, 
    366260, 
    373340, 
    383700, 
    391390, 
    398715, 
    407380, 
    414940, 
    422870, 
    430870, 
    439020, 
    450190, 
    460780, 
    469050, 
    476090
  ], 
  "text": [
    "David Patterson: So the goals are to really learn software engineering. So, harking back to my student days, I've always been kind of ", 
    "amazed at how bad software engineering is taught at the universities. Because back when I was doing it, you were supposed to have 100 people working for five years to build software, in a ", 
    "complete mismatch of what you're supposed to do with what you can teach in the classroom. So I, like students ever since then, would listen to the ", 
    "instructor, ignore what they said, and just build software at the end just like we always have. What's great is what's happened is software has been ", 
    "reinvented in a way that makes it a lot easier to teach. It matches the classroom. So I was excited about coming back to it. ", 
    "So from my perspective-- as you know, I do hardware stuff, but I kind of watch the software things and so the approach that-- ", 
    "I turned it off again. The approach that Armando and I took was, well, why don't we just explain what's different between the hardware and software, to explain why they're ", 
    "these differences here. And the thing that's really striking to me, who does more hardware stuff, is why are there so ", 
    "many software disasters? Wow. What a thing. In fact, it's kind of if you teach the software ", 
    "engineering, these are cliches. It's like the prison thing about all they had to do is say page 34, joke 34, and everybody laughed because they ", 
    "heard it so many times. These are cliches. The Ariane 5 rocket explosion. Oh, yeah. Therac-25 lethal radiation dose. The Mars Orbiter disintegration. ", 
    "FBI file case abandonment. Huge, famous disasters. You may have heard of the Ariane 5 rocket explosion, but ", 
    "you may not have seen it. So I'm going to show it to you. So the setup is, this is France. ", 
    "They've gone through a series of rockets. The Ariane 4 worked great. Ariane 5 is a lot faster, OK? ", 
    "It's a lot faster. And so it's recording its miles per hour to get a bigger number, right? And so what happens? ", 
    "Oh, decoutage means takeoff. SPEAKER: Decollage! ", 
    "David Patterson: Decollage! Uh-oh. ", 
    "That's a software bug. So what happened? There goes $350 million worth of satellites right there. ", 
    "So what happened? So it kind of made sense to reuse the software that worked last time. ", 
    "But because this went faster rocket, because memory was precious, they calculate in 64-bit double precision ", 
    "floating point, but they converted to 16-bit integers to save the information. So that was an arithmetic overflow error. ", 
    "A fairly dramatic arithmetic overflow error. One of the things in this class, we'll be talking about ", 
    "testing, the importance of testing. And that's a famous example of the importance of testing. You know, it worked before. The conservative thing to do is keep using software that ", 
    "worked last time, except for that problem. So what I would say has happened is, basically, hardware and software are very different media. ", 
    "And the cultures that have grown up around them reflect that media, and they're very different. So, for example, one aspect is the cost of a field upgrade. ", 
    "So Intel makes 350 million microprocessors for PCs. You have 350 million. What would it cost to upgrade that? ", 
    "Basically, it'd be infinity. Go around to 350 million people and fix the microprocessor. ", 
    "That would be an infinite cost. So the hardware has really got to work. So what this means is, huge amount of resources are put ", 
    "into making sure the hardware works. And if you get hardware with a bug, you think it's broken, ", 
    "and you send it back. Software bugs-- what does it cost to field upgrade? It's almost zero. ", 
    "It's not really zero. There's some cost to it. But it's trivial to upgrade the software. That Microsoft upgrades the software in 350 million PCs ", 
    "every year. So the culture and expectations are, software is going to get better over time. So what if it has a bug? ", 
    "Well, if it has bugs, I've just got to get the latest version. It'll probably fix it. And given the field upgrade differences between hardware and software, that explains a lot of the cultures that have ", 
    "grown up around it. And the interesting thing from the hardware perspective is almost as soon as you buy it, it starts ", 
    "getting less valuable. It's like it decays in front of you. Within three years, they just throw it away. You can see this thing you built and slaved away for five ", 
    "years, and you can find it in a junkyard in three years. Software, this stuff that crashes and blows up satellites and all that, it lasts forever. ", 
    "Software can last for a long time. We have an example in the book of a piece of software that lasted 50 years. I mean, the whole field's not much longer than 50 years. ", 
    "So the chance is software can last forever. And particularly, software is expected to evolve. And that brings up this next important idea of legacy code. ", 
    "Legacy code is this fact that software can live for a very long time. And legacy code is software that people keep using. ", 
    "To last 50 years, somebody has to use it. But there's kind of a negative connotation with legacy code, in that it's hard to maintain, it's hard to evolve, or it's ", 
    "antiquated technology. And typically today, 60% percent of maintenance cost is adding functionality to legacy code, and only 17% for bugs. ", 
    "So legacy code plays this really important role. But we want you to build software that's going to last a long time, but you don't want the next generation of ", 
    "Berkeley students to call legacy code. So we want beautiful code. We want beautiful code, which means it's valuable, it meets ", 
    "customers' needs, and it's easy to evolve over time. And that's what you're going to learn in this class. Now the thing about legacy code is it's usually ignored ", 
    "in both textbooks and classes. When Armando and I decided we were going to do this, there's a lot of complaints of industry about software ", 
    "engineering courses. So we thought, hey, we'll take advantage of our friends and asked a half a dozen companies, OK, you guys have ", 
    "been complaining about these courses. What should we be talking about? Every single company-- and this is Amazons and Googles and Facebook, Microsoft-- ", 
    "every single company, the first thing that they said is you have to teach them how to deal with legacy code. How to enhance legacy code. ", 
    "It was amazing the unanimity of those arch rivals, that they all said the same thing. Everybody's second and third choices were different, but ", 
    "they all said dealing with legacy code. So there absolutely is going to be assignments in this course. We've added a chapter on it. ", 
    "The first three people said it, we tried to argue with them. No, you don't mean that. How are we going to teach legacy code? It's going to be too hard. But by the fifth and sixth, we decided we had to do it. ", 
    "So newly this time, there's a chapter in the book about legacy code. And there's programming assignments that you'll be doing. So you'll be dealing with legacy code, and you'll figure ", 
    "out how to do that, both in the online course and in the Berkeley course. OK. Now is a chance to try out this first question. ", 
    "You couldn't have possibly lost your cards already. So what type of software is considered an epic failure? ", 
    "The number one, which I consider orange, beautiful code. Number two is legacy code. "
  ]
}